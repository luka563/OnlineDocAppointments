// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StomatoloskaOrdinacija.Models;

#nullable disable

namespace StomatoloskaOrdinacija.Migrations
{
    [DbContext(typeof(zubarContext))]
    [Migration("20230430173259_v17")]
    partial class v17
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.Blog", b =>
                {
                    b.Property<int>("BlogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextHTML")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogID");

                    b.ToTable("blogs");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentID"));

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CommentFromID")
                        .HasColumnType("int");

                    b.Property<int>("CommentToID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("CommentID");

                    b.HasIndex("CommentFromID");

                    b.HasIndex("CommentToID");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.Rating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingID"));

                    b.Property<int>("FromWhoID")
                        .HasColumnType("int");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.Property<int>("ToWhoID")
                        .HasColumnType("int");

                    b.HasKey("RatingID");

                    b.HasIndex("FromWhoID");

                    b.HasIndex("ToWhoID");

                    b.ToTable("ratings");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.US", b =>
                {
                    b.Property<int>("USID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("USID"));

                    b.Property<string>("specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("USID");

                    b.ToTable("uss");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<Guid>("ActivationCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpecializationUSID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("SpecializationUSID");

                    b.ToTable("users");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.Comment", b =>
                {
                    b.HasOne("StomatoloskaOrdinacija.Models.User", "CommentFrom")
                        .WithMany("CommentsFrom")
                        .HasForeignKey("CommentFromID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StomatoloskaOrdinacija.Models.User", "CommentTo")
                        .WithMany("CommentsTo")
                        .HasForeignKey("CommentToID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CommentFrom");

                    b.Navigation("CommentTo");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.Rating", b =>
                {
                    b.HasOne("StomatoloskaOrdinacija.Models.User", "FromWho")
                        .WithMany("RatingsFrom")
                        .HasForeignKey("FromWhoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StomatoloskaOrdinacija.Models.User", "ToWho")
                        .WithMany("RatingsTo")
                        .HasForeignKey("ToWhoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromWho");

                    b.Navigation("ToWho");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.User", b =>
                {
                    b.HasOne("StomatoloskaOrdinacija.Models.US", "Specialization")
                        .WithMany("User")
                        .HasForeignKey("SpecializationUSID");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.US", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.User", b =>
                {
                    b.Navigation("CommentsFrom");

                    b.Navigation("CommentsTo");

                    b.Navigation("RatingsFrom");

                    b.Navigation("RatingsTo");
                });
#pragma warning restore 612, 618
        }
    }
}
